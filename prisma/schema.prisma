// /prisma/schema.prisma

// Define o gerador de cliente do Prisma.
generator client {
  provider = "prisma-client-js"
}

// Define a fonte de dados (MongoDB).
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ============================================================================
//  MODELOS PRINCIPAIS (Versão Aprimorada)
// ============================================================================

// --- Modelo de Usuário ---
model User {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  email       String @unique
  auth0UserId String @unique
  name        String

  legalOneContactId Int?

  // --- FLUXO DE APROVAÇÃO ---
  // Substitui 'profileCompleted' para um status mais granular.
  // PENDING_REVIEW: O utilizador completou o perfil e aguarda aprovação do Admin.
  // ACTIVE: Aprovado e pode aceder à plataforma.
  // REJECTED: Rejeitado pela Mazzotini.
  status String @default("PENDING_REVIEW")

  // --- NOVOS CAMPOS CADASTRAIS (Conforme solicitado) ---
  rg                String?
  birthDate         DateTime?
  profession        String? // Atividade (profissão)
  contactPreference String? // "email", "whatsapp", ou "both"
  infoEmail         String? // Email secundário para informações
  profilePictureUrl String? // URL da foto de perfil (Cloudinary, S3, etc.)

  // Endereço Residencial (Estruturado)
  residentialCep          String?
  residentialStreet       String?
  residentialNumber       String?
  residentialComplement   String?
  residentialNeighborhood String?
  residentialCity         String?
  residentialState        String?

  // Endereço Comercial (Estruturado)
  commercialCep          String?
  commercialStreet       String?
  commercialNumber       String?
  commercialComplement   String?
  commercialNeighborhood String?
  commercialCity         String?
  commercialState        String?

  // NOVO: Escolha do endereço de correspondência
  correspondenceAddress String? @default("residential") // "residential" ou "commercial"

  // Documentos
  personalDocumentUrls String[]

  // --- Campos Antigos ---
  cpfOrCnpj     String?
  phone         String?
  cellPhone     String?
  address       String? // Depreciado, será substituído pelos endereços estruturados
  nationality   String?
  maritalStatus String?
  indication    String? // Depreciado, será substituído pelo 'referredBy'

  // --- Relações ---
  investments Investment[] // Os investimentos que este utilizador (se Investidor) fez

  // Relação com o Associado (Vendedor) que o indicou
  // A CORREÇÃO ESTÁ AQUI: Adicionamos onDelete e onUpdate
  referredBy   User?   @relation("UserReferrals", fields: [referredById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referredById String? @db.ObjectId
  referrals    User[]  @relation("UserReferrals") // Lista de utilizadores que este Associado indicou

  // Relação com os Ativos que este Associado gere
  associatedAssets CreditAsset[] @relation("AssociatedAssets")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- Modelo de Ativo de Crédito ---
model CreditAsset {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  processNumber        String    @unique
  origemProcesso       String
  originalCreditor     String
  originalValue        Float
  acquisitionValue     Float
  currentValue         Float
  acquisitionDate      DateTime
  settlementDate       DateTime?
  contractualIndexRate Float?
  updateIndexType      String?
  informacaoExtra      String?
  status               String
  lawsuitType          String?
  lawyerResponsible    String?

  // --- Relações ---
  updates   AssetUpdate[]
  investors Investment[]
  documents Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relação com o Associado (Vendedor)
  associateId String? @db.ObjectId
  associate   User?   @relation("AssociatedAssets", fields: [associateId], references: [id])
}

// --- Modelo de Atualização do Ativo ---
model AssetUpdate {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  legalOneUpdateId Int?     @unique // ID original do "Update" do Legal One
  date             DateTime @default(now())
  updatedValue     Float
  description      String?
  source           String

  assetId String      @db.ObjectId
  asset   CreditAsset @relation(fields: [assetId], references: [id])
}

// --- Modelo de Relação (Investidor <-> Ativo) ---
model Investment {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  investorShare  Float
  mazzotiniShare Float

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  creditAssetId String      @db.ObjectId
  asset         CreditAsset @relation(fields: [creditAssetId], references: [id])
}

// --- Modelo de Documento ---
model Document {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  legalOneDocumentId Int?        @unique // ID original do Legal One
  name               String
  url                String
  category           String
  assetId            String      @db.ObjectId
  asset              CreditAsset @relation(fields: [assetId], references: [id])
  uploadedAt         DateTime    @default(now())
}
