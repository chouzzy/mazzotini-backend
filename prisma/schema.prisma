// prisma/schema.prisma

// Define o gerador de cliente do Prisma.
generator client {
  provider = "prisma-client-js"
}

// Define a fonte de dados (MongoDB).
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ============================================================================
//   MODELOS PRINCIPAIS (Adaptados para Mazzotini)
// ============================================================================

// --- Modelo de Usuário ---
// Armazena todos os usuários do sistema: Admins, Operadores e Investidores.
model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  auth0UserId String   @unique // Ligação com o sistema de autenticação Auth0
  name        String?
  // O campo 'role' foi removido. A fonte da verdade agora será o token do Auth0.

  // Relações
  investments Investment[] // Lista de investimentos que este usuário (investidor) fez

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// --- Modelo de Ativo de Crédito ---
// A entidade central do sistema, representando um crédito judicial adquirido.
model CreditAsset {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  processNumber   String   @unique // Número do processo judicial, para identificação
  originalCreditor String  // Nome do cidadão que processou a empresa
  debtorCompany   String   // Nome da empresa devedora
  
  // Valores
  originalValue   Float    // Valor original do crédito (ex: 50.000)
  acquisitionValue Float   // Valor pago pelo crédito (ex: 30.000)
  currentValue    Float    // Valor atualizado do crédito (com juros)
  
  status          String   // Ex: "Ativo", "Liquidado", "Em negociação"
  
  // Relações
  updates         AssetUpdate[]   // Histórico de atualizações do ativo
  investors       Investment[]    // Lista de investidores neste ativo
  documents       Document[]      // Documentos associados ao ativo

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// --- Modelo de Atualização do Ativo ---
// Registra o histórico de atualizações do valor do crédito, vindo do Legal One.
model AssetUpdate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  description String   // Descrição da atualização (ex: "Correção monetária mensal")
  updatedValue Float   // O novo valor do ativo após a atualização
  source      String   @default("Legal One") // De onde veio a informação
  
  assetId     String   @db.ObjectId
  asset       CreditAsset @relation(fields: [assetId], references: [id])
}

// --- Modelo de Relação (Investidor <-> Ativo) ---
// Tabela de junção que define a participação de cada investidor em um ativo.
model Investment {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  investorShare     Float    // Percentual de participação do investidor (ex: 80.0)
  mazzotiniShare    Float    // Percentual de participação da Mazzotini (ex: 20.0)
  
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])

  creditAssetId     String   @db.ObjectId
  asset             CreditAsset @relation(fields: [creditAssetId], references: [id])
}

// --- Modelo de Documento ---
// Para gerenciar contratos e outros arquivos associados ao crédito.
model Document {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  url         String   // URL do arquivo (ex: S3, Google Cloud Storage)
  category    String   // Ex: "Cessão de Crédito", "Sentença Judicial"
  
  assetId     String   @db.ObjectId
  asset       CreditAsset @relation(fields: [assetId], references: [id])

  uploadedAt  DateTime @default(now())
}

// O Enum 'Role' não é mais necessário aqui, será gerenciado pelo Auth0.
